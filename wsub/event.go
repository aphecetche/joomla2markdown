// Package toto contains the types for schema 'jlabo'.
package wsub

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"fmt"
	"time"
	"io"

	"github.com/lunny/html2md"
)


// Event represents a row from 'jlabo.wsub_events'.
type Event struct {
	ID             int64     `json:"id"`               // id
	DateStart      time.Time `json:"date_start"`       // date_start
	DateEnd        time.Time `json:"date_end"`         // date_end
	Location       string    `json:"location"`         // location
	Alias          string    `json:"alias"`            // alias
	PreSummary     string    `json:"pre_summary"`      // pre_summary
	PostSummary    string    `json:"post_summary"`     // post_summary
	CheckedOut     int       `json:"checked_out"`      // checked_out
	CheckedOutTime time.Time `json:"checked_out_time"` // checked_out_time
	Title          string    `json:"title"`            // title
	URLMoreInfo    string    `json:"url_more_info"`    // url_more_info
	State          int8      `json:"state"`            // state
	Created        time.Time `json:"created"`          // created
	CreatedBy      int       `json:"created_by"`       // created_by
	Modified       time.Time `json:"modified"`         // modified
	ModifiedBy     int       `json:"modified_by"`      // modified_by
	PublishUp      time.Time `json:"publish_up"`       // publish_up
	PublishDown    time.Time `json:"publish_down"`     // publish_down
	Attribs        string    `json:"attribs"`          // attribs

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Event exists in the database.
func (we *Event) Exists() bool {
	return we._exists
}

// EventsByAlias retrieves a row from 'jlabo.wsub_events' as a Event.
//
// Generated from index 'alias'.
func Events(db* sql.DB, where string) ([]*Event, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, date_start, date_end, location, alias, pre_summary, post_summary, checked_out, checked_out_time, title, url_more_info, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs ` +
		`FROM jlabo.wsub_events `

    qs := sqlstr + `WHERE ` + where
	// run query
	q, err := db.Query(qs)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Event{}
	for q.Next() {
		we := Event{
			_exists: true,
		}

		// scan
		err = q.Scan(&we.ID, &we.DateStart, &we.DateEnd, &we.Location, &we.Alias, &we.PreSummary, &we.PostSummary, &we.CheckedOut, &we.CheckedOutTime, &we.Title, &we.URLMoreInfo, &we.State, &we.Created, &we.CreatedBy, &we.Modified, &we.ModifiedBy, &we.PublishUp, &we.PublishDown, &we.Attribs)
		if err != nil {
			return nil, err
		}

		res = append(res, &we)
	}

	return res, nil
}



func (e Event) Write(out io.Writer) {
	fmt.Fprintln(out, "---")
	fmt.Fprintf(out, "date: \"%s\"\n", e.DateStart)
	fmt.Fprintf(out, "date_end: \"%s\"\n", e.DateEnd)
	fmt.Fprintf(out, "location: \"%s\"\n", e.Location)
	fmt.Fprintf(out, "title: \"%s\"\n", e.Title)
	fmt.Fprintln(out, "---")
	fmt.Fprintln(out)
	fmt.Fprintln(out, html2md.Convert(cleanupHTML(e.PreSummary)))
}
